package test

import (
	"github.com/kubemq-io/kubemq-community/pkg/entities"
	pb "github.com/kubemq-io/protobuf/go"
	"github.com/nats-io/nuid"
)

var SendRequestErrorFixtures = []struct {
	Name            string
	Request         *pb.Request
	ExpectedErrText string
}{
	{
		Name: "invalid_request_type",
		Request: &pb.Request{
			RequestID:            nuid.Next(),
			RequestTypeData:      0,
			ClientID:             "test-client-id",
			Channel:              "some_channel",
			Metadata:             "test-metadata",
			Body:                 []byte("test-body"),
			ReplyChannel:         "",
			Timeout:              1000,
			CacheKey:             "",
			CacheTTL:             0,
			Span:                 nil,
			XXX_NoUnkeyedLiteral: struct{}{},
			XXX_sizecache:        0,
		},
		ExpectedErrText: entities.ErrInvalidRequestType.Error(),
	},

	{
		Name: "invalid_channel",
		Request: &pb.Request{
			RequestID:            nuid.Next(),
			RequestTypeData:      pb.Request_Command,
			ClientID:             "test-client-id",
			Channel:              "",
			Metadata:             "test-metadata",
			Body:                 []byte("test-body"),
			ReplyChannel:         "",
			Timeout:              1000,
			CacheKey:             "",
			CacheTTL:             0,
			Span:                 nil,
			XXX_NoUnkeyedLiteral: struct{}{},
			XXX_sizecache:        0,
		},
		ExpectedErrText: entities.ErrInvalidChannel.Error(),
	},
	{
		Name: "invalid_client_id",
		Request: &pb.Request{
			RequestID:            nuid.Next(),
			RequestTypeData:      pb.Request_Command,
			ClientID:             "",
			Channel:              "test-channel",
			Metadata:             "test-metadata",
			Body:                 []byte("test-body"),
			ReplyChannel:         "",
			Timeout:              1000,
			CacheKey:             "",
			CacheTTL:             0,
			Span:                 nil,
			XXX_NoUnkeyedLiteral: struct{}{},
			XXX_sizecache:        0,
		},
		ExpectedErrText: entities.ErrInvalidClientID.Error(),
	},
	{
		Name: "invalid_channel_string",
		Request: &pb.Request{
			RequestID:            nuid.Next(),
			RequestTypeData:      pb.Request_Command,
			ClientID:             "test-client-id",
			Channel:              "test-channel_with_*_or_>",
			Metadata:             "test-metadata",
			Body:                 []byte("test-body"),
			ReplyChannel:         "",
			Timeout:              1000,
			CacheKey:             "",
			CacheTTL:             0,
			Span:                 nil,
			XXX_NoUnkeyedLiteral: struct{}{},
			XXX_sizecache:        0,
		},
		ExpectedErrText: entities.ErrInvalidWildcards.Error(),
	},
	{
		Name: "invalid_channel_string_with_whitespace",
		Request: &pb.Request{
			RequestID:            nuid.Next(),
			RequestTypeData:      pb.Request_Command,
			ClientID:             "test-client-id",
			Channel:              "test-channel_with white spaces",
			Metadata:             "test-metadata",
			Body:                 []byte("test-body"),
			ReplyChannel:         "",
			Timeout:              1000,
			CacheKey:             "",
			CacheTTL:             0,
			Span:                 nil,
			XXX_NoUnkeyedLiteral: struct{}{},
			XXX_sizecache:        0,
		},
		ExpectedErrText: entities.ErrInvalidWhitespace.Error(),
	},
	{
		Name: "invalid_timeout",
		Request: &pb.Request{
			RequestID:            nuid.Next(),
			RequestTypeData:      pb.Request_Command,
			ClientID:             "test-client-id",
			Channel:              "test-channel",
			Metadata:             "test-metadata",
			Body:                 []byte("test-body"),
			ReplyChannel:         "",
			Timeout:              0,
			CacheKey:             "",
			CacheTTL:             0,
			Span:                 nil,
			XXX_NoUnkeyedLiteral: struct{}{},
			XXX_sizecache:        0,
		},
		ExpectedErrText: entities.ErrInvalidSetTimeout.Error(),
	},
	{
		Name: "invalid_timeout_negative",
		Request: &pb.Request{
			RequestID:            nuid.Next(),
			RequestTypeData:      pb.Request_Query,
			ClientID:             "test-client-id",
			Channel:              "test-channel",
			Metadata:             "test-metadata",
			Body:                 []byte("test-body"),
			ReplyChannel:         "",
			Timeout:              -100,
			CacheKey:             "",
			CacheTTL:             0,
			Span:                 nil,
			XXX_NoUnkeyedLiteral: struct{}{},
			XXX_sizecache:        0,
		},
		ExpectedErrText: entities.ErrInvalidSetTimeout.Error(),
	},
	{
		Name: "invalid_request_empty",
		Request: &pb.Request{
			RequestID:            nuid.Next(),
			RequestTypeData:      pb.Request_Query,
			ClientID:             "test-client-id",
			Channel:              "test-channel",
			Metadata:             "",
			Body:                 nil,
			ReplyChannel:         "",
			Timeout:              1000,
			CacheKey:             "",
			CacheTTL:             0,
			Span:                 nil,
			XXX_NoUnkeyedLiteral: struct{}{},
			XXX_sizecache:        0,
		},
		ExpectedErrText: entities.ErrRequestEmpty.Error(),
	},
	{
		Name: "invalid_cache_ttl_value",
		Request: &pb.Request{
			RequestID:            nuid.Next(),
			RequestTypeData:      pb.Request_Query,
			ClientID:             "test-client-id",
			Channel:              "test-channel",
			Metadata:             "test-metadata",
			Body:                 []byte("test-body"),
			ReplyChannel:         "",
			Timeout:              1000,
			CacheKey:             "test-cache-key",
			CacheTTL:             0,
			Span:                 nil,
			XXX_NoUnkeyedLiteral: struct{}{},
			XXX_sizecache:        0,
		},
		ExpectedErrText: entities.ErrInvalidCacheTTL.Error(),
	},
}

var SendResponseErrorFixtures = []struct {
	Name            string
	Response        *pb.Response
	ExpectedErrText string
}{
	{
		Name: "invalid_reply_channel",
		Response: &pb.Response{
			ClientID:             "test-client-id",
			RequestID:            nuid.Next(),
			ReplyChannel:         "",
			Metadata:             "test-metadata",
			Body:                 []byte("test-body"),
			CacheHit:             false,
			Timestamp:            0,
			Executed:             false,
			Error:                "",
			Span:                 nil,
			XXX_NoUnkeyedLiteral: struct{}{},
			XXX_sizecache:        0,
		},
		ExpectedErrText: entities.ErrInvalidChannel.Error(),
	},
	{
		Name: "invalid_client_id",
		Response: &pb.Response{
			ClientID:             "",
			RequestID:            nuid.Next(),
			ReplyChannel:         "some-reply-channel",
			Metadata:             "test-metadata",
			Body:                 []byte("test-body"),
			CacheHit:             false,
			Timestamp:            0,
			Executed:             false,
			Error:                "",
			Span:                 nil,
			XXX_NoUnkeyedLiteral: struct{}{},
			XXX_sizecache:        0,
		},
		ExpectedErrText: entities.ErrInvalidClientID.Error(),
	},
	{
		Name: "invalid_channel_string",
		Response: &pb.Response{
			ClientID:             "test-client-id",
			RequestID:            nuid.Next(),
			ReplyChannel:         "some-reply-channel.*.>",
			Metadata:             "test-metadata",
			Body:                 []byte("test-body"),
			CacheHit:             false,
			Timestamp:            0,
			Executed:             false,
			Error:                "",
			Span:                 nil,
			XXX_NoUnkeyedLiteral: struct{}{},
			XXX_sizecache:        0,
		},
		ExpectedErrText: entities.ErrInvalidWildcards.Error(),
	},
	{
		Name: "invalid_channel_string_with_whitespace",
		Response: &pb.Response{
			ClientID:             "test-client-id",
			RequestID:            nuid.Next(),
			ReplyChannel:         "some-reply-channel with with space",
			Metadata:             "test-metadata",
			Body:                 []byte("test-body"),
			CacheHit:             false,
			Timestamp:            0,
			Executed:             false,
			Error:                "",
			Span:                 nil,
			XXX_NoUnkeyedLiteral: struct{}{},
			XXX_sizecache:        0,
		},
		ExpectedErrText: entities.ErrInvalidWhitespace.Error(),
	},
	{
		Name: "invalid_request_id",
		Response: &pb.Response{
			ClientID:             "test-client-id",
			RequestID:            "",
			ReplyChannel:         "some-reply-channel",
			Metadata:             "test-metadata",
			Body:                 []byte("test-body"),
			CacheHit:             false,
			Timestamp:            0,
			Executed:             false,
			Error:                "",
			Span:                 nil,
			XXX_NoUnkeyedLiteral: struct{}{},
			XXX_sizecache:        0,
		},
		ExpectedErrText: entities.ErrInvalidRequestID.Error(),
	},
}
